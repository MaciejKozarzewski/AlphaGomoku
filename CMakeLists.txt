cmake_minimum_required(VERSION 3.18)
project(AlphaGomoku VERSION 5.5.0 DESCRIPTION "Alpha zero for the game of Gomoku" LANGUAGES CXX)

option(BUILD_TESTING "Build unit tests?" OFF)
option(BUILD_WITH_OPENBLAS "Build with OpenBlas support" ON)
option(BUILD_WITH_CUDA "Build with CUDA support" ON)
set(MINML_BACKEND_PATH "/home/maciek/cpp_workspace/minml/" CACHE STRING "Path to ml backend library" FORCE)
set(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Choose debug postfix" FORCE)
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose build type" FORCE)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

add_library(AlphaGomoku STATIC)
add_subdirectory("src/dataset/")
add_subdirectory("src/game/")
add_subdirectory("src/networks/")
add_subdirectory("src/patterns/")
add_subdirectory("src/player/")
add_subdirectory("src/protocols/")
add_subdirectory("src/search/")
add_subdirectory("src/selfplay/")
add_subdirectory("src/utils/")

set_target_properties(AlphaGomoku PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_include_directories(AlphaGomoku PUBLIC "${PROJECT_SOURCE_DIR}/include")
target_include_directories(AlphaGomoku PUBLIC "${MINML_BACKEND_PATH}/include")
target_compile_options(AlphaGomoku PUBLIC -march=native)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_CUDA)
	if (WIN32)
		target_link_libraries(AlphaGomoku PUBLIC cudaml)
	else()
		target_link_libraries(AlphaGomoku PUBLIC "${MINML_BACKEND_PATH}/build/lib/libMinML.a")
		target_link_libraries(AlphaGomoku PUBLIC "${MINML_BACKEND_PATH}/build/lib/libcuda_backend_static.a")
		target_include_directories(AlphaGomoku PUBLIC "/usr/local/cuda/include")
		target_link_directories(AlphaGomoku PUBLIC "/usr/local/cuda/lib64")
		target_link_libraries(AlphaGomoku PUBLIC cudart cublas)
	endif()
endif()
target_link_libraries(AlphaGomoku PUBLIC z)

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
	target_link_libraries(AlphaGomoku PUBLIC OpenMP::OpenMP_CXX)
else()
	message(FATAL_ERROR "no OpenMP")
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_OPENBLAS)
	target_compile_definitions(AlphaGomoku PRIVATE USE_OPENBLAS=1)
	target_link_libraries(AlphaGomoku PUBLIC openblas)
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
	enable_testing()
	include(GoogleTest)
	add_subdirectory("test")
endif()

#add_executable(ag_player "player_launcher/launcher.cpp")
#set_target_properties(ag_player PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
#target_link_libraries(ag_player PUBLIC AlphaGomoku)

add_executable(ag_training "training_launcher/launcher.cpp")
set_target_properties(ag_training PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(ag_training PUBLIC AlphaGomoku)
