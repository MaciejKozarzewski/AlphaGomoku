cmake_minimum_required(VERSION 3.18)
project(AlphaGomoku VERSION 5.6.0 DESCRIPTION "Alpha zero for the game of Gomoku" LANGUAGES CXX)

option(BUILD_TESTING "Build unit tests?" ON)
option(BUILD_WITH_CUDA "Build with CUDA support" OFF)
option(BUILD_WITH_OPENCL "Build with OpenCL support" OFF)
option(BUILD_WITH_CUDNN "Build with CUDNN support" OFF)
set(MINML_BACKEND_PATH "" CACHE STRING "Path to ml backend library")
set(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Choose debug postfix")
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose build type")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if(BUILD_WITH_CUDA)
	set(LibName AlphaGomoku_cuda)
	set(PlayerName ag_player_cuda)
	set(TrainingName ag_training_cuda)
	set(TuningName ag_tuning_cuda)
	set(SandboxName ag_sandbox_cuda)
	set(TestName ag_testing_cuda)
else()
	if(BUILD_WITH_OPENCL)
		set(LibName AlphaGomoku_opencl)
		set(PlayerName ag_player_opencl)
		set(TrainingName ag_training_opencl)
		set(TuningName ag_tuning_opencl)
		set(SandboxName ag_sandbox_opencl)
		set(TestName ag_testing_opencl)
	else()
		set(LibName AlphaGomoku_cpu)
		set(PlayerName ag_player_cpu)
		set(TrainingName ag_training_cpu)
		set(TuningName ag_tuning_cpu)
		set(SandboxName ag_sandbox_cpu)
		set(TestName ag_testing_cpu)
	endif()
endif()

add_library(${LibName} STATIC)
add_subdirectory("src/dataset/")
add_subdirectory("src/game/")
add_subdirectory("src/networks/")
add_subdirectory("src/patterns/")
add_subdirectory("src/player/")
add_subdirectory("src/protocols/")
add_subdirectory("src/search/")
add_subdirectory("src/selfplay/")
add_subdirectory("src/utils/")

set_target_properties(${LibName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_include_directories(${LibName} PUBLIC "${PROJECT_SOURCE_DIR}/include")
target_include_directories(${LibName} PUBLIC "${MINML_BACKEND_PATH}/include")
target_compile_options(${LibName} PUBLIC -msse2)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_CUDA)
	target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/cuda/Release/lib/libMinML_cuda.a")
	if (WIN32)
		target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/cuda/Release/bin/cudaml.dll")
	else()
		target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/cuda/Release/lib/libcuda_backend_static.a")
		target_include_directories(${LibName} PUBLIC "/usr/local/cuda/include")
		target_link_directories(${LibName} PUBLIC "/usr/local/cuda/lib64")
		target_link_libraries(${LibName} PUBLIC cudart cublas)
		if (BUILD_WITH_CUDNN)
			target_link_libraries(${LibName} PUBLIC cudnn_ops_infer cudnn_cnn_infer cublasLt)
		endif()
	endif()	
else()
	if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_WITH_OPENCL)
		target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/opencl/Release/lib/libMinML_opencl.a")
		target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/opencl/Release/lib/libopencl_backend_static.a")
		target_link_libraries(${LibName} PUBLIC OpenCL clblast)
	else()
		target_link_libraries(${LibName} PUBLIC "${MINML_BACKEND_PATH}/build/cpu/Release/lib/libMinML_cpu.a")
	endif()
endif()

if (WIN32)
	target_link_libraries(${LibName} PUBLIC pthread)
	target_link_libraries(${LibName} PUBLIC "${PROJECT_SOURCE_DIR}/extern/libzlibstatic.a")
else()
	target_link_libraries(${LibName} PUBLIC z pthread)
endif()

find_package(OpenMP)
if(OpenMP_CXX_FOUND)
	target_link_libraries(${LibName} PUBLIC OpenMP::OpenMP_CXX)
else()
	message(FATAL_ERROR "no OpenMP")
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
	enable_testing()
	include(GoogleTest)
	add_subdirectory("test")
endif()

add_executable(${PlayerName} "player_launcher/launcher.cpp")
set_target_properties(${PlayerName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(${PlayerName} PUBLIC ${LibName})

add_executable(${TrainingName} "training_launcher/launcher.cpp")
set_target_properties(${TrainingName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(${TrainingName} PUBLIC ${LibName})

add_executable(${TuningName} "tuning_launcher/launcher.cpp")
set_target_properties(${TuningName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(${TuningName} PUBLIC ${LibName})

add_executable(${SandboxName} "sandbox_launcher/launcher.cpp")
set_target_properties(${SandboxName} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
target_link_libraries(${SandboxName} PUBLIC ${LibName})
