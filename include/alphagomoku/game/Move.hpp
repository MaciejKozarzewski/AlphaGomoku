/*
 * Move.hpp
 *
 *  Created on: Feb 20, 2021
 *      Author: Maciej Kozarzewski
 */

#ifndef ALPHAGOMOKU_MCTS_MOVE_HPP_
#define ALPHAGOMOKU_MCTS_MOVE_HPP_

#include <string>
#include <cassert>

namespace ag
{
	enum class Sign : int16_t
	{
		NONE, // empty spot on board
		CROSS, // or black
		CIRCLE, // or white
		ILLEGAL // typically outside of board
	};
	inline Sign invertSign(Sign sign) noexcept
	{
		switch (sign)
		{
			default:
				return Sign::NONE;
			case Sign::CROSS:
				return Sign::CIRCLE;
			case Sign::CIRCLE:
				return Sign::CROSS;
		}
	}
	std::string toString(Sign sign);
	Sign signFromString(const std::string &str);
	std::string text(Sign sign);
	std::ostream& operator<<(std::ostream &stream, Sign sign);
	std::string operator+(const std::string &lhs, Sign rhs);
	std::string operator+(Sign lhs, const std::string &rhs);

	struct Move
	{
			Sign sign = Sign::NONE;
			int8_t row = 0;
			int8_t col = 0;

			Move() = default;
			/**
			 * @brief Creates move from text representation, as generated by method.
			 * @see text()
			 */
			Move(Sign s, Move m) noexcept :
					sign(s),
					row(m.row),
					col(m.col)
			{
			}
			Move(const std::string &str);
			Move(int r, int c, Sign s) noexcept :
					sign(s),
					row(r),
					col(c)
			{
				assert(row >= 0 && row < 128);
				assert(col >= 0 && col < 128);
			}
			Move(Sign s, int r, int c) noexcept :
					sign(s),
					row(r),
					col(c)
			{
				assert(row >= 0 && row < 128);
				assert(col >= 0 && col < 128);
			}
			Move(int r, int c) noexcept :
					Move(Sign::NONE, r, c)
			{
			}

			uint16_t toShort() const noexcept
			{
//				return Move::move_to_short(row, col, sign);
				return static_cast<uint16_t>(sign) + (row << 2) + (col << 9);
			}

			std::string toString() const;
			/**
			 * @brief Converts the move to text representation with format:
			 * 1 character for sign - '_', 'X', 'O' or '|'
			 * 1 character for column - starting from 'a', lowercase, from left to right
			 * 1 or 2 digits for row - starting from 0, from top to bottom
			 *
			 * For example:
			 * Xa0 - cross (or black) in the upper left corner.
			 * Oc2 - circle (or white) in the second row and third column.
			 */
			std::string text() const;

			static uint16_t move_to_short(int r, int c, Sign s) noexcept
			{
				return static_cast<uint16_t>(s) + (r << 2) + (c << 9);
			}
			static Move move_from_short(uint16_t m) noexcept
			{
				return Move(static_cast<Sign>(m & 3), (m >> 2) & 127, (m >> 9) & 127);
			}
			static int getRow(uint16_t move) noexcept
			{
				return (move >> 2) & 127;
			}
			static int getCol(uint16_t move) noexcept
			{
				return (move >> 9) & 127;
			}
			static Sign getSign(uint16_t move) noexcept
			{
				return static_cast<Sign>(move & 3);
			}
			/**
			 * @brief Creates a move from text representation that does not contain sign information.
			 */
			static Move fromText(const std::string &txt, Sign sign);

			friend bool operator==(const Move &lhs, const Move &rhs) noexcept
			{
				return (lhs.row == rhs.row) && (lhs.col == rhs.col) && (lhs.sign == rhs.sign);
			}
			friend bool operator!=(const Move &lhs, const Move &rhs) noexcept
			{
				return (lhs.row != rhs.row) || (lhs.col != rhs.col) || (lhs.sign != rhs.sign);
			}
	};

} /* namespace ag */

#endif /* ALPHAGOMOKU_MCTS_MOVE_HPP_ */
